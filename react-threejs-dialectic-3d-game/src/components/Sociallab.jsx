"use client"

import { useState } from "react"
import { motion } from "framer-motion"

// Game state management
export default function SocialLabGame({ onComplete }) {
  const [gameState, setGameState] = useState("intro") // intro, level1, level2, result
  const [level1Selection, setLevel1Selection] = useState(null)
  const [level1Complete, setLevel1Complete] = useState(false)
  const [level2Arrangement, setLevel2Arrangement] = useState([
    { id: "automation", label: "Automation thay th·∫ø lao ƒë·ªông", value: 0, position: 0 },
    { id: "recession", label: "Suy tho√°i kinh t·∫ø", value: 0, position: 1 },
    { id: "education", label: "ƒê√†o t·∫°o kh√¥ng ƒë√°p ·ª©ng th·ªã tr∆∞·ªùng", value: 0, position: 2 },
  ])
  const [level2Complete, setLevel2Complete] = useState(false)

  const handleStartGame = () => {
    setGameState("level1")
  }

  const handleLevel1Selection = (selection) => {
    setLevel1Selection(selection)

    // Simulate processing time
    setTimeout(() => {
      setLevel1Complete(true)
    }, 1000)
  }

  const handleContinueToLevel2 = () => {
    setGameState("level2")
  }

  const handleLevel2Complete = () => {
    setLevel2Complete(true)
    onComplete()
  }

  const handleRestart = () => {
    setGameState("intro")
    setLevel1Selection(null)
    setLevel1Complete(false)
    setLevel2Complete(false)
    setLevel2Arrangement([
      { id: "automation", label: "Automation thay th·∫ø lao ƒë·ªông", value: 0, position: 0 },
      { id: "recession", label: "Suy tho√°i kinh t·∫ø", value: 0, position: 1 },
      { id: "education", label: "ƒê√†o t·∫°o kh√¥ng ƒë√°p ·ª©ng th·ªã tr∆∞·ªùng", value: 0, position: 2 },
    ])
  }

  const updateLevel2Arrangement = (id, newValue) => {
    setLevel2Arrangement(level2Arrangement.map((item) => (item.id === id ? { ...item, value: newValue } : item)))
  }

  return (
    <div className="w-full h-screen bg-gradient-to-br from-indigo-950 via-purple-900 to-fuchsia-900 overflow-hidden">
      {/* Lab visualization - static image instead of 3D */}
      <div className="absolute inset-0 pointer-events-none">
        <div className="absolute inset-0 bg-[radial-gradient(circle_at_center,rgba(59,130,246,0.1),transparent_70%)]"></div>
        <div className="absolute bottom-0 left-0 right-0 h-40 bg-gradient-to-t from-black/50 to-transparent"></div>
      </div>

      {/* UI Overlays */}
      <div className="absolute inset-0 pointer-events-none">
        {gameState === "intro" && <IntroScreen onStart={handleStartGame} />}

        {gameState === "level1" && !level1Complete && <Level1UI onSelection={handleLevel1Selection} />}

        {gameState === "level1" && level1Complete && (
          <Level1ResultUI selection={level1Selection} onContinue={handleContinueToLevel2} />
        )}

        {gameState === "level2" && !level2Complete && (
          <Level2UI
            arrangement={level2Arrangement}
            updateArrangement={updateLevel2Arrangement}
            onComplete={handleLevel2Complete}
          />
        )}

        {gameState === "result" && <ResultScreen onComplete={onComplete} />}
      </div>
    </div>
  )
}

// UI Components
function IntroScreen({ onStart }) {
  return (
    <div className="absolute inset-0 flex items-center justify-center pointer-events-auto">
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.8 }}
        className="bg-gray-900/90 backdrop-blur-md p-8 rounded-xl max-w-2xl text-center border border-cyan-500/30"
      >
        <h1 className="text-4xl font-bold text-white mb-4">PH√íNG TH√ç NGHI·ªÜM BI·∫æN ƒê·ªîI X√É H·ªòI</h1>
        <p className="text-cyan-300 text-xl mb-6">Kh√°m ph√° m·ªëi quan h·ªá nh√¢n qu·∫£ trong c√°c y·∫øu t·ªë x√£ h·ªôi</p>

        <div className="mb-8 text-gray-300 text-left space-y-4">
          <p>
            B·∫°n l√† m·ªôt nh√† khoa h·ªçc tr·∫ª, nhi·ªám v·ª• c·ªßa b·∫°n l√† thao t√°c v·ªõi c√°c y·∫øu t·ªë x√£ h·ªôi trong ph√≤ng th√≠ nghi·ªám ƒë·ªÉ
            quan s√°t m·ªëi quan h·ªá nh√¢n qu·∫£ gi·ªØa ch√∫ng.
          </p>
          <p>
            Th√¥ng qua c√°c th√≠ nghi·ªám, b·∫°n s·∫Ω hi·ªÉu r√µ h∆°n v·ªÅ c√°ch c√°c quy·∫øt ƒë·ªãnh ch√≠nh s√°ch c√≥ th·ªÉ ·∫£nh h∆∞·ªüng ƒë·∫øn x√£ h·ªôi
            theo nhi·ªÅu c√°ch kh√°c nhau.
          </p>
        </div>

        <button
          onClick={onStart}
          className="px-8 py-3 bg-gradient-to-r from-cyan-500 to-blue-600 text-white rounded-full text-lg font-medium hover:from-cyan-600 hover:to-blue-700 transition-all"
        >
          B·∫Øt ƒë·∫ßu th√≠ nghi·ªám
        </button>
      </motion.div>
    </div>
  )
}

function Level1UI({ onSelection }) {
  return (
    <div className="absolute inset-0 flex flex-col items-center justify-center pointer-events-auto p-8">
      <div className="bg-gray-900/80 backdrop-blur-md p-6 rounded-lg max-w-2xl border border-cyan-500/30 w-full">
        <h2 className="text-2xl font-bold text-white mb-4">Th√≠ nghi·ªám ƒë∆°n gi·∫£n</h2>
        <p className="text-cyan-300 mb-6">ƒêi·ªÅu g√¨ x·∫£y ra n·∫øu tƒÉng ƒë·∫ßu t∆∞ v√†o gi√°o d·ª•c?</p>

        <div className="flex items-center justify-center mb-8">
          <div className="w-20 h-20 bg-green-500/20 rounded-full flex items-center justify-center border border-green-500/50">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-10 w-10 text-green-400"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={1.5}
                d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"
              />
            </svg>
          </div>
        </div>

        <div className="text-gray-300 text-center mb-6">
          <p>Ng√¢n s√°ch gi√°o d·ª•c tƒÉng 50% s·∫Ω d·∫´n ƒë·∫øn k·∫øt qu·∫£ g√¨?</p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <button
            onClick={() => onSelection("direct")}
            className="px-4 py-3 bg-green-600/20 border border-green-500/50 text-green-400 rounded-lg text-sm hover:bg-green-600/30 transition-colors"
          >
            ‚úÖ K·∫øt qu·∫£ tr·ª±c ti·∫øp: "T·ª∑ l·ªá bi·∫øt ch·ªØ tƒÉng"
          </button>
          <button
            onClick={() => onSelection("indirect")}
            className="px-4 py-3 bg-blue-600/20 border border-blue-500/50 text-blue-400 rounded-lg text-sm hover:bg-blue-600/30 transition-colors"
          >
            üîÑ K·∫øt qu·∫£ gi√°n ti·∫øp: "GDP tƒÉng sau 10 nƒÉm"
          </button>
          <button
            onClick={() => onSelection("reverse")}
            className="px-4 py-3 bg-red-600/20 border border-red-500/50 text-red-400 rounded-lg text-sm hover:bg-red-600/30 transition-colors"
          >
            ‚ùå T√°c d·ª•ng ng∆∞·ª£c: "Ng√¢n s√°ch y t·∫ø b·ªã c·∫Øt gi·∫£m"
          </button>
        </div>
      </div>
    </div>
  )
}

function Level1ResultUI({ selection, onContinue }) {
  let resultText = ""
  let resultClass = ""

  switch (selection) {
    case "direct":
      resultText =
        "Ch√≠nh x√°c! TƒÉng ng√¢n s√°ch gi√°o d·ª•c tr·ª±c ti·∫øp d·∫´n ƒë·∫øn t·ª∑ l·ªá bi·∫øt ch·ªØ tƒÉng. ƒê√¢y l√† m·ªëi quan h·ªá nh√¢n qu·∫£ tr·ª±c ti·∫øp d·ªÖ quan s√°t nh·∫•t."
      resultClass = "border-green-500/50 bg-green-900/20"
      break
    case "indirect":
      resultText =
        "ƒê√∫ng m·ªôt ph·∫ßn! TƒÉng ng√¢n s√°ch gi√°o d·ª•c c√≥ th·ªÉ d·∫´n ƒë·∫øn GDP tƒÉng sau 10 nƒÉm, nh∆∞ng ƒë√¢y l√† k·∫øt qu·∫£ gi√°n ti·∫øp th√¥ng qua vi·ªác n√¢ng cao ch·∫•t l∆∞·ª£ng ngu·ªìn nh√¢n l·ª±c."
      resultClass = "border-blue-500/50 bg-blue-900/20"
      break
    case "reverse":
      resultText =
        "Kh√¥ng ch√≠nh x√°c! TƒÉng ng√¢n s√°ch gi√°o d·ª•c kh√¥ng nh·∫•t thi·∫øt d·∫´n ƒë·∫øn c·∫Øt gi·∫£m ng√¢n s√°ch y t·∫ø. ƒê√¢y l√† m·ªôt quan ni·ªám sai l·∫ßm v·ªÅ m·ªëi quan h·ªá nh√¢n qu·∫£."
      resultClass = "border-red-500/50 bg-red-900/20"
      break
  }

  return (
    <div className="absolute inset-0 flex items-center justify-center pointer-events-auto">
      <motion.div
        initial={{ opacity: 0, scale: 0.9 }}
        animate={{ opacity: 1, scale: 1 }}
        transition={{ duration: 0.5 }}
        className={`bg-gray-900/90 backdrop-blur-md p-8 rounded-xl max-w-2xl border ${resultClass}`}
      >
        <h2 className="text-2xl font-bold text-white mb-4">K·∫øt qu·∫£ th√≠ nghi·ªám</h2>
        <p className="text-gray-300 mb-6">{resultText}</p>

        <div className="bg-gray-800/50 p-4 rounded-lg mb-6">
          <h3 className="text-lg font-semibold text-white mb-2">Ph√¢n t√≠ch khoa h·ªçc:</h3>
          <p className="text-gray-300 text-sm">
            ƒê·∫ßu t∆∞ v√†o gi√°o d·ª•c t·∫°o ra m·ªôt chu·ªói t√°c ƒë·ªông x√£ h·ªôi ph·ª©c t·∫°p. Hi·ªáu qu·∫£ tr·ª±c ti·∫øp l√† n√¢ng cao tr√¨nh ƒë·ªô d√¢n
            tr√≠, nh∆∞ng c√≤n c√≥ nhi·ªÅu t√°c ƒë·ªông gi√°n ti·∫øp kh√°c nh∆∞ gi·∫£m t·ª∑ l·ªá t·ªôi ph·∫°m, tƒÉng nƒÉng su·∫•t lao ƒë·ªông, v√† c·∫£i
            thi·ªán s·ª©c kh·ªèe c·ªông ƒë·ªìng.
          </p>
        </div>

        <button
          onClick={onContinue}
          className="px-6 py-3 bg-gradient-to-r from-cyan-500 to-blue-600 text-white rounded-lg text-lg font-medium hover:from-cyan-600 hover:to-blue-700 transition-all"
        >
          Ti·∫øp t·ª•c ƒë·∫øn th√≠ nghi·ªám ti·∫øp theo
        </button>
      </motion.div>
    </div>
  )
}

function Level2UI({ arrangement, updateArrangement, onComplete }) {
  const isComplete = arrangement.every((item) => item.value > 0)

  return (
    <div className="absolute inset-0 flex items-center justify-center pointer-events-auto p-8">
      <div className="bg-gray-900/90 backdrop-blur-md p-6 rounded-xl max-w-2xl border border-cyan-500/30 w-full">
        <h2 className="text-2xl font-bold text-white mb-4">Ph√¢n t√≠ch ƒëa nguy√™n nh√¢n</h2>
        <p className="text-cyan-300 mb-6">T·∫°i sao t·ª∑ l·ªá th·∫•t nghi·ªáp tƒÉng?</p>

        <div className="flex items-center justify-center mb-8">
          <div className="w-20 h-20 bg-blue-500/20 rounded-full flex items-center justify-center border border-blue-500/50">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-10 w-10 text-blue-400"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={1.5}
                d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"
              />
            </svg>
          </div>
        </div>

        <div className="text-gray-300 text-center mb-6">
          <p>ƒêi·ªÅu ch·ªânh m·ª©c ƒë·ªô ·∫£nh h∆∞·ªüng c·ªßa t·ª´ng y·∫øu t·ªë ƒë·∫øn t·ª∑ l·ªá th·∫•t nghi·ªáp</p>
        </div>

        <div className="space-y-6 mb-8">
          {arrangement.map((item) => (
            <div key={item.id} className="flex items-center gap-4">
              <div
                className={`w-12 h-12 rounded-full flex items-center justify-center ${
                  item.id === "automation"
                    ? "bg-purple-900/30 border border-purple-500/50"
                    : item.id === "recession"
                      ? "bg-red-900/30 border border-red-500/50"
                      : "bg-blue-900/30 border border-blue-500/50"
                }`}
              >
                {item.id === "automation" && (
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    className="h-6 w-6 text-purple-400"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={1.5}
                      d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"
                    />
                  </svg>
                )}
                {item.id === "recession" && (
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    className="h-6 w-6 text-red-400"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={1.5}
                      d="M13 17h8m0 0V9m0 8l-8-8-4 4-6-6"
                    />
                  </svg>
                )}
                {item.id === "education" && (
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    className="h-6 w-6 text-blue-400"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path d="M12 14l9-5-9-5-9 5 9 5z" />
                    <path d="M12 14l6.16-3.422a12.083 12.083 0 01.665 6.479A11.952 11.952 0 0012 20.055a11.952 11.952 0 00-6.824-2.998 12.078 12.078 0 01.665-6.479L12 14z" />
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={1.5}
                      d="M12 14l9-5-9-5-9 5 9 5zm0 0l6.16-3.422a12.083 12.083 0 01.665 6.479A11.952 11.952 0 0012 20.055a11.952 11.952 0 00-6.824-2.998 12.078 12.078 0 01.665-6.479L12 14zm-4 6v-7.5l4-2.222"
                    />
                  </svg>
                )}
              </div>

              <div className="flex-1">
                <div className="flex justify-between mb-1">
                  <span className="text-white text-sm">{item.label}</span>
                  <span
                    className={`text-sm font-bold ${
                      item.id === "automation"
                        ? "text-purple-400"
                        : item.id === "recession"
                          ? "text-red-400"
                          : "text-blue-400"
                    }`}
                  >
                    {item.value}%
                  </span>
                </div>
                <input
                  type="range"
                  min="0"
                  max="100"
                  value={item.value}
                  onChange={(e) => updateArrangement(item.id, Number.parseInt(e.target.value))}
                  className={`w-full h-2 rounded-lg appearance-none cursor-pointer ${
                    item.id === "automation"
                      ? "bg-purple-900/30"
                      : item.id === "recession"
                        ? "bg-red-900/30"
                        : "bg-blue-900/30"
                  }`}
                />
              </div>
            </div>
          ))}
        </div>

        <button
          onClick={onComplete}
          disabled={!isComplete}
          className={`w-full px-6 py-3 rounded-lg text-lg font-medium transition-all ${
            isComplete
              ? "bg-gradient-to-r from-cyan-500 to-blue-600 text-white hover:from-cyan-600 hover:to-blue-700"
              : "bg-gray-700 text-gray-400 cursor-not-allowed"
          }`}
        >
          Ho√†n th√†nh ph√¢n t√≠ch
        </button>
      </div>
    </div>
  )
}

function ResultScreen({ onComplete }) {
  return (
    <div className="absolute inset-0 flex items-center justify-center pointer-events-auto">
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.8 }}
        className="bg-gray-900/90 backdrop-blur-md p-8 rounded-xl max-w-2xl text-center border border-cyan-500/30"
      >
        <h1 className="text-3xl font-bold text-white mb-4">Th√≠ nghi·ªám ho√†n th√†nh!</h1>
        <p className="text-cyan-300 text-xl mb-6">B·∫°n ƒë√£ kh√°m ph√° m·ªëi quan h·ªá nh√¢n qu·∫£ trong c√°c y·∫øu t·ªë x√£ h·ªôi</p>

        <div className="mb-8 text-gray-300 text-left space-y-4">
          <p>Th√¥ng qua c√°c th√≠ nghi·ªám, b·∫°n ƒë√£ th·∫•y ƒë∆∞·ª£c:</p>
          <ul className="list-disc pl-5 space-y-2">
            <li>M·ªëi quan h·ªá tr·ª±c ti·∫øp gi·ªØa ƒë·∫ßu t∆∞ gi√°o d·ª•c v√† t·ª∑ l·ªá bi·∫øt ch·ªØ</li>
            <li>T√°c ƒë·ªông gi√°n ti·∫øp c·ªßa gi√°o d·ª•c ƒë·∫øn ph√°t tri·ªÉn kinh t·∫ø</li>
            <li>C√°c nguy√™n nh√¢n ƒëa chi·ªÅu c·ªßa v·∫•n ƒë·ªÅ th·∫•t nghi·ªáp</li>
          </ul>
          <p className="mt-4">
            C√°c hi·ªán t∆∞·ª£ng x√£ h·ªôi th∆∞·ªùng c√≥ nhi·ªÅu nguy√™n nh√¢n v√† t·∫°o ra nhi·ªÅu h·ªá qu·∫£ ph·ª©c t·∫°p. Vi·ªác ph√¢n t√≠ch ƒëa chi·ªÅu
            gi√∫p ch√∫ng ta hi·ªÉu r√µ h∆°n v√† ƒë∆∞a ra c√°c gi·∫£i ph√°p hi·ªáu qu·∫£.
          </p>
        </div>

        <button
          onClick={onComplete}
          className="px-8 py-3 bg-gradient-to-r from-cyan-500 to-blue-600 text-white rounded-full text-lg font-medium hover:from-cyan-600 hover:to-blue-700 transition-all"
        >
          H·ªçc l√Ω thuy·∫øt nh√©
        </button>
      </motion.div>
    </div>
  )
}
